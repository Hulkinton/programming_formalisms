---
title: "TDD 1"
author: "Rich√®l Bilderbeek"
format: revealjs
editor: visual
from: markdown+emoji
---

## TDD

![](programming_formalism_course.png)

## Problem

How do you grow/develop your code?

## Newbie developers

'Just start somewhere'

![](chaotic_programmer.png)

## Experienced developers

Work systematically

![](organised_female_programmer.png)

## TDD

Short for 'Test-driven development' A systematic way to grow code

![](tdd_hat_2.jpg)

## TDD cycle

![](tdd_cycle_2.jpg)

## First example: `is_zero`

-   Function name: `is_zero`
-   Output:
    -   Returns `True`/`TRUE` if the input is zero
    -   Returns `False`/`FALSE` if the input is not zero
    -   :warning: Gives an error when the input is not a number

## Cycle 1, red: write a test that breaks

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
#| eval: false
assert is_zero(0)
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
#| eval: false
library(testthat)
expect_true(is_zero(0))
```
:::
:::

:monocle_face: Is this code run?

## Cycle 1, green: make the test pass

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
def is_zero(number): 
  return True

assert is_zero(0)
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
library(testthat)

is_zero <- function(number) {
  TRUE
}

expect_true(is_zero(0))
```
:::
:::

## Cycle 1, blue: refactor and commit

```         
git add .
git commit -m "Add stub of 'is_zero'"
git push
```

![](organised_male_programmer.png)

## Cycle 2, red: write a test that breaks

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
#| eval: false
assert is_zero(0)
assert not is_zero(42)
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
#| eval: false
expect_true(is_zero(0))
expect_false(is_zero(42))
```
:::
:::

## Cycle 2, green: make the test pass

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
def is_zero(x):
  return x == 0

assert is_zero(0)
assert not is_zero(42)
```

:monocle_face: indent of 2 is non-standard, see [PEP 8](https://peps.python.org/pep-0008/)

:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
library(testthat)

is_zero <- function(number) {
  number == 0
}

expect_true(is_zero(0))
expect_false(is_zero(42))
```
:::
:::

## Cycle 2, blue: refactor and commit

```         
git add .
git commit -m "'is_zero' responds correctly to numbers"
git push
```

![](organised_female_programmer.png)

## Reflection

Q: Do developers really do this? 

A: Yes

## Cycle 3, red: write a test that breaks

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
#| eval: false
has_thrown = False
try:
  is_zero("")
except:
  has_thrown = True
assert has_thrown
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
#| eval: false
expect_error(is_zero(""))
```
:::
:::

## Cycle 3, green: make the test pass

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
def is_zero(x):
  if not isinstance(x, int):
    raise TypeError(
      "'number' must be a number"
    )
  return x == 0

assert is_zero(0)
assert not is_zero(42)

has_thrown = False
try:
  is_zero("")
except:
  has_thrown = True
assert has_thrown
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
library(testthat)

is_zero <- function(number) {
  if (!is.numeric(number)) 
    stop(
      "'number' must be a number"
    ) 
  number == 0
}

expect_true(is_zero(0))
expect_false(is_zero(42))
expect_error(is_zero(""))
```
:::
:::

## Cycle 3, blue: refactor and commit

```         
git add .
git commit -m "'is_zero' responds correctly to non-numbers"
git push
```

![](organised_male_programmer.png)

## Reflection

Are we done?

## Cycle 4, red: break the code

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
#| eval: false
assert not is_zero(0.1)
```

:no_mouth: This fails

:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
expect_false(is_zero(0.1))
```

:partying_face: This passes

:::
:::

## Problem

How many tests should I write?

## Answer

Until you cannot break your function anymore.

## Exercise: `is_odd`

`is_odd` is function that determines if a number is odd.

 * Write the design document of `is_odd`
 * Practice the TDD workflow

![](chaotic_programmer.png)

## Other exercises

  * `is_even`
  * `divide` (include division by zero)
  * `add` (including overflow!)
  * `can_divide_by_three`
  * `sum_digits`
  * `get_array_length`
  * `is_palindrome` (string)
  * `is_palindrome` (number)
  * `get_proper_divisors`
  * `is_prime`
  * `is_roman_str`
  * `to_roman_str`
  * `roman_str_to_number`
  * `is_perfect`
  * [calc_n_ways_to_climb_stairs](https://leetcode.com/problems/climbing-stairs/)


## More complex tests

-   Arrange
-   Act
-   Assert

## Links

-   [Mentimeter presentation](https://www.mentimeter.com/app/presentation/al6k1j9uduvzeru5wabwsq3b411mwnt1/xp2pfbgddtct)
