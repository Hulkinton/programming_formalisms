---
title: "Test-Driven Development"
author: "RichÃ¨l Bilderbeek"
format: revealjs
editor: visual
from: markdown+emoji
bibliography: tdd_lecture.bib
csl: vancouver.csl
---

## Test-Driven Development ![](CC-BY-NC-SA.png)

<https://github.com/UPPMAX/programming_formalisms/blob/main/tdd/tdd_lecture/tdd_lecture.qmd>

![](programming_formalism_course.png)

## Problem

How do you grow/develop your code?

![](thomas_and_hunt_the_pragmatic_programmer.jpg)

## Newbie developers

'Just start somewhere'

![](chaotic_programmer.png)

## Experienced developers

Work systematically

![](organised_female_programmer.png)

## TDD

Short for 'Test-driven development' A systematic way to grow code

![](tdd_hat_2.jpg)

## TDD cycle

![](tdd_cycle_2.jpg)

## Example exercise: `is_zero`

-   Function name: `is_zero`
-   Output:
    -   Returns `True` if the input is zero
    -   Returns `False` if the input is not zero
    -   :warning: Gives an error when the input is not a number

## Live demo (15 minutes)

-   [**Python video for 'is_zero'**](https://youtu.be/VddlrNOeodg)
-   [R video for 'is_one'](https://youtu.be/IPGfW4lrxOc)
-   Or see also slides beyond end

## Reflection

Q: Do developers really do this?

. . .

A: Yes

![](beck_tdd_by_example.jpg) ![](book_langr.jpg)

## Exercise 1: `is_even`

-   Create a GitHub repository called `is_even`
-   Share URL of repo with teachers
-   Develop a function called `is_even`
-   Try to be **exemplary**
-   We'll discuss a repo history after the break

Done? Write `is_odd`, then `is_probility`.

## Break 1

![](dilbert_agile_2.png)

## Reflection

Q: Does this really save time?

. . .

A: No, it takes longer

| Study                  | Extra time | Effect                        |
|------------------------|------------|-------------------------------|
| @george2004structured  | 16%        | 18% more black-box tests pass |
| @bhat2006evaluating    | 15%        | 2x higher code quality        |
| @nagappan2008realizing | 15-35%     | 40%-90% less defects          |

## Reflection

Q: Why do TDD?

. . .

A:

-   TDD makes developers more productive @erdogmus2005effectiveness
-   TDD increases quality of the code @erdogmus2005effectiveness @alkaoud2018quality @janzen2006test
    -   There are plenty of costly programming mistakes documented!
-   TDD helps shape the project architecture @mayr2005projekt
-   TDD helps better modularisation @madeyski2010test
-   TDD works great with Xtreme programming and CI

## Reflection

Q: How many tests should I write?

. . .

A: Until you cannot break your function anymore.

![](beck_tdd_by_example.jpg) ![](book_langr.jpg)

## Exercise 2: `is_odd`

-   Create a GitHub repository called `is_odd`
-   Share URL of repo with teachers
-   Develop a function called `is_odd`
-   Try to be **exemplary**
-   We'll discuss a repo history after the break

Done? Try exercise 3: `is_probability`.

![](chaotic_programmer.png)

## Break 2

![](dilbert_agile_1.png)

## Exercise 3: `is_probability`

-   Create a GitHub repository called `is_probability`
-   Share URL of repo with teachers
-   Develop a function called `is_probability`
-   Try to be **exemplary**
-   We'll discuss a repo history after the break

## Extra exercises

Done?

| Exercise | Function name     | Function purpose                             |
|-----------------|-----------------|--------------------------------------|
| 4        | `is_number`       | Determines if an object is a number          |
| 5        | `are_numbers`     | Determines if an object is a list of numbers |
| S1       | `is_roman_number` | Determine if a string is a roman number      |
| S2       | `is_prime`        | Determine if a number is a prime number      |

## Bottom line

-   Today we wrote **unit tests**
-   It is only those your boss may read
-   The literature assumes a responsible programmer writes tests, in C++ @stroustrup2018cpp, R @wickham2019advanced and Python @van2001pep

![](thomas_and_hunt_the_pragmatic_programmer.jpg)

## Problems

-   We only test manually
-   We only test om our computer
-   We are not sure if our functions are tested completely
-   We do not test the code for style
-   We should consider using a testing framework

## Finally

Time for a Reflection!

Afterwards, you can rest or ask your final questions.

![](dilbert_tdd_3.png)

## The End

![](dilbert_tdd_4.png)

## Links

-   [Mentimeter presentation](https://www.mentimeter.com/app/presentation/al6k1j9uduvzeru5wabwsq3b411mwnt1/xp2pfbgddtct) of previous year

## TDD cycles in text

-   In both Python and R

## First example: `is_zero`

-   Function name: `is_zero`
-   Output:
    -   Returns `True`/`TRUE` if the input is zero
    -   Returns `False`/`FALSE` if the input is not zero
    -   :warning: Gives an error when the input is not a number

## Cycle 1, red: write a test that breaks

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png) ðŸª±

```{python}
#| echo: true
#| eval: false
assert is_zero(0)
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png) ðŸª±

```{r}
#| echo: true
#| eval: false
library(testthat)
expect_true(is_zero(0))
```
:::
:::

:monocle_face: code that is not run, uses ðŸª±, as a worm cannot run.

## Cycle 1, green: make the test pass

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
def is_zero(number): 
  return True

assert is_zero(0)
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
library(testthat)

is_zero <- function(number) {
  TRUE
}

expect_true(is_zero(0))
```
:::
:::

## Cycle 1, blue: refactor and commit

```         
git add .
git commit -m "Add stub of 'is_zero'"
git push
```

![](organised_male_programmer.png)

## Cycle 2, red: write a test that breaks

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png) ðŸª±

```{python}
#| echo: true
#| eval: false
assert is_zero(0)
assert not is_zero(42)
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png) ðŸª±

```{r}
#| echo: true
#| eval: false
expect_true(is_zero(0))
expect_false(is_zero(42))
```
:::
:::

## Cycle 2, green: make the test pass

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
def is_zero(x):
  return x == 0

assert is_zero(0)
assert not is_zero(42)
```

:monocle_face: indent of 2 is non-standard, see [PEP 8](https://peps.python.org/pep-0008/)
:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
library(testthat)

is_zero <- function(number) {
  number == 0
}

expect_true(is_zero(0))
expect_false(is_zero(42))
```
:::
:::

## Cycle 2, blue: refactor and commit

```         
git add .
git commit -m "'is_zero' responds correctly to numbers"
git push
```

![](organised_female_programmer.png)
