---
title: "TDD"
author: "RichÃ¨l Bilderbeek"
format: revealjs
editor: visual
from: markdown+emoji
---

## TDD

![](programming_formalism_course.png)

## Problem

How do you grow/develop your code?

![](beck_tdd_by_example.jpg)

## Newbie developers

'Just start somewhere'

![](chaotic_programmer.png)

## Experienced developers

Work systematically

![](organised_female_programmer.png)

## TDD

Short for 'Test-driven development' A systematic way to grow code

![](tdd_hat_2.jpg)

## TDD cycle

![](tdd_cycle_2.jpg)

## Example exercise: `is_zero`

-   Function name: `is_zero`
-   Output:
    -   Returns `True`/`TRUE` if the input is zero
    -   Returns `False`/`FALSE` if the input is not zero
    -   :warning: Gives an error when the input is not a number

## Live demo (15 minutes)

<https://youtu.be/VddlrNOeodg>

## Reflection

Q: Do developers really do this?

. . .

A: Yes

![](book_langr.jpg)

## Exercise 1:`is_even`

-   Create a GitHub repository called `is_even`
-   Share URL of repo with teachers
-   Develop a function called `is_even`
-   Try to be **exemplary**
-   We'll discuss a repo history after the break

Done? Try [other easy functions](https://github.com/UPPMAX/programming_formalisms/blob/main/learning_line.md#easy)

## Break 1

![](dilbert_agile_2.png)

## Reflection

Q: Does this really save time?

. . .

A: No, it takes longer

| Study | Extra time | Effect                        |
|-------|------------|-------------------------------|
| 1     | 16%        | 18% more black-box tests pass |
| 2     | 15%        | 2x higher code quality        |
| 3     | 15-35%     | 40%-90% less defects          |

## Reflection references

-   \[1\] George, Boby, and Laurie Williams. "A structured experiment of test-driven development." Information and software Technology 46.5 (2004): 337-342.
-   \[2\] Bhat, Thirumalesh, and Nachiappan Nagappan. "Evaluating the efficacy of test-driven development: industrial case studies." Proceedings of the 2006 ACM/IEEE international symposium on Empirical software engineering. 2006.
-   \[3\] Nagappan, Nachiappan, et al. "Realizing quality improvement through test driven development: results and experiences of four industrial teams." Empirical Software Engineering 13 (2008): 289-302.

## Discussion on Reflection

Do note, the scope of these researches is limited:

-   Mistakes can be costly
-   TDD allows a dialogue
-   TDD results is a better software architecture

## Reflection

Q: Why do TDD?

. . .

A:

-   TDD makes developers more productive [1]
-   TDD increases quality of the code [1-3]
    -   There are plenty of costly programming mistakes documented!
-   TDD helps shape the project architecture [20]
-   TDD helps better modularisation [30]
-   TDD works great with Xtreme programming and CI

## References for Reflection

 * [1] Erdogmus, Hakan, Maurizio Morisio, and Marco Torchiano. "On the effectiveness of the test-first approach to programming." IEEE Transactions on software Engineering 31.3 (2005): 226-237.
 * [2] Quality metrics of test suites in test-driven designed applications
 * [3] Janzen, David S., and Hossein Saiedian. "Test-driven learning: intrinsic integration of testing into the CS/SE curriculum." Acm Sigcse Bulletin 38.1 (2006): 254-258.
-   [20] Mayr, Herwig. Projekt Engineering: IngenieurmÃ¤ÃŸige Softwareentwicklung in Projektgruppen. Hanser Verlag, 2005.
-   [30] Madeyski, Lech, and GestiÃ³n de sistemas de informaciÃ³n. Test-driven development: An empirical evaluation of agile practice. Heidelberg: Springer, 2010.

## Reflection

Q: How many tests should I write?

. . .

A: Until you cannot break your function anymore.

![](beck_tdd_by_example.jpg)

## Exercise 2: `is_odd`

-   Create a GitHub repository called `is_odd`
-   Share URL of repo with teachers
-   Develop a function called `is_odd`
-   Try to be **exemplary**
-   We'll discuss a repo history after the break

Done? Try exercise 3: `is_probability`.

![](chaotic_programmer.png)

## Break 2

![](dilbert_agile_1.png)

## Exercise 3: `is_probability`

-   Create a GitHub repository called `is_probability`
-   Share URL of repo with teachers
-   Develop a function called `is_probability`
-   Try to be **exemplary**
-   We'll discuss a repo history after the break

## Extra exercises

Done?

| Exercise | Function name     | Function purpose                             |
|--------------|--------------|-------------------------------------------|
| 4        | `is_number`       | Determines if an object is a number          |
| 5        | `are_numbers`     | Determines if an object is a list of numbers |
| S1       | `is_roman_number` | Determine if a string is a roman number      |
| S2       | `is_prime`        | Determine if a number is a prime number      |

## Bottom line

-   Today we wrote **unit tests**
-   It is only those your boss may read
-   The literature assumes a responsible programmer writes tests \[1,2,3\] (it is built-in to Python!)

![](thomas_and_hunt_the_pragmatic_programmer.jpg)

## References

-   \[1\] [C++ Core Guidelines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines)
-   \[2\] [The tidyverse style guide](https://style.tidyverse.org)
-   \[3\] [Python PEP 8 - Style Guide for Python Code](https://peps.python.org/pep-0008/)

## Problems

-   We only test manually
-   We only test om our computer
-   We are not sure if our functions are tested completely
-   We do not test the code for style

## Finally

Time for a Reflection!

Afterwards, you can rest or ask your final questions.

![](dilbert_tdd_3.png)

## The End

![](dilbert_tdd_4.png)

## Links

-   [Mentimeter presentation](https://www.mentimeter.com/app/presentation/al6k1j9uduvzeru5wabwsq3b411mwnt1/xp2pfbgddtct) of previous year

## TDD cycles in text

-   In both Python and R

## First example: `is_zero`

-   Function name: `is_zero`
-   Output:
    -   Returns `True`/`TRUE` if the input is zero
    -   Returns `False`/`FALSE` if the input is not zero
    -   :warning: Gives an error when the input is not a number

## Cycle 1, red: write a test that breaks

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png) ðŸª±

```{python}
#| echo: true
#| eval: false
assert is_zero(0)
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png) ðŸª±

```{r}
#| echo: true
#| eval: false
library(testthat)
expect_true(is_zero(0))
```
:::
:::

:monocle_face: code that is not run, uses ðŸª±, as a worm cannot run.

## Cycle 1, green: make the test pass

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
def is_zero(number): 
  return True

assert is_zero(0)
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
library(testthat)

is_zero <- function(number) {
  TRUE
}

expect_true(is_zero(0))
```
:::
:::

## Cycle 1, blue: refactor and commit

```         
git add .
git commit -m "Add stub of 'is_zero'"
git push
```

![](organised_male_programmer.png)

## Cycle 2, red: write a test that breaks

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png) ðŸª±

```{python}
#| echo: true
#| eval: false
assert is_zero(0)
assert not is_zero(42)
```
:::

::: {.column width="50%"}
![](r_icon_41x32.png) ðŸª±

```{r}
#| echo: true
#| eval: false
expect_true(is_zero(0))
expect_false(is_zero(42))
```
:::
:::

## Cycle 2, green: make the test pass

::: columns
::: {.column width="50%"}
![](python_icon_26x32.png)

```{python}
#| echo: true
def is_zero(x):
  return x == 0

assert is_zero(0)
assert not is_zero(42)
```

:monocle_face: indent of 2 is non-standard, see [PEP 8](https://peps.python.org/pep-0008/)
:::

::: {.column width="50%"}
![](r_icon_41x32.png)

```{r}
#| echo: true
library(testthat)

is_zero <- function(number) {
  number == 0
}

expect_true(is_zero(0))
expect_false(is_zero(42))
```
:::
:::

## Cycle 2, blue: refactor and commit

```         
git add .
git commit -m "'is_zero' responds correctly to numbers"
git push
```

![](organised_female_programmer.png)
