---
title: "Testing"
author: "Rich√®l Bilderbeek"
format: revealjs
editor: visual
from: markdown+emoji
---

## Testing

![](programming_formalism_course.png)

## Problem

When do you trust your code? When do you trust code written by others? How do you convince other developers of a bug?

## Testing

![](beck_tdd_by_example.jpg) ![](langr_tdd.jpg) ![](thomas_and_hunt_the_pragmatic_programmer.jpg)

## Testing framework

-   **`unittest`**, `pytest`, `nose`, etc.
-   Makes it easier to write unit tests
-   Takes some scaffolding
-   Failed tests give a better error message.

## Test if something is true

```{python}
assert 1 + 1 == 2
```

```{python}
import unittest

class TestSmall(unittest.TestCase):
    def test_is_true(self):
        self.assertIsTrue(1 + 1 == 2)
```

:neutral_face: Mostly scaffolding here

## Test if something is equal

```{python}
assert 1 + 1 == 2
```

```{python}
import unittest

class TestSmall(unittest.TestCase):
    def test_is_equal(self):
        self.assertEqual(1 + 1, 2)
```

:monocle_face: Hamcrest notation can give better error message.

## Test if something raises an exception

```{python}
def raise_error():
    raise RunType("Raise an error!")

has_raised = False
try:
    raise_error() 
except:
    has_raised = True
assert has_raised
```

```{python}
import unittest

class TestSmall(unittest.TestCase):
    def test_raises(self):
        self.assertRaises(RunTimeError, raise_error)
```

:smile: here it pays off.

## First example: `is_prime`

-   Function name: `is_prime`
-   Output:
    -   Returns `True` if the input is prime
    -   Returns `False` if the input is not prime
    -   :warning: Gives an error when the input is not an integer
-   Work within scaffolding of <https://github.com/richelbilderbeek/programming_formalisms_medium_project>

## Live demo (15 minutes)

<https://youtu.be/qVtHieuwM1M>

-   (or [download (.ogv)](https://richelbilderbeek.nl/tdd_python_is_prime.ogv))

## Reflection

[Reflection]

## Exercise

-   Pair up
-   Switch roles every 3 minutes
-   Discuss how to keep the time first
-   Person with GitHub username first in alphabet starts
-   Create a Fork of <https://github.com/richelbilderbeek/programming_formalisms_medium_project>
-   Develop a function called `get_digits`
-   Try to be **exemplary**
-   We'll discuss a repo history after the break

Instructors will visit the rooms to observe.

Done? Try [more easy prime functions](https://github.com/UPPMAX/programming_formalisms/blob/main/learning_line.md#prime-easy)

## Break

[Break](#break-1)

`get_digits` video:

-   [download (.ogv)](https://richelbilderbeek.nl/tdd_python_get_digits.ogv)
-   [YouTube](https://youtu.be/qVtHieuwM1M)

## Problem

How to work together well?

. . .

Encourage/enforce:

-   URL links are valid
-   Correct spelling
-   Code must pass all tests
-   High code coverage
-   Uniform coding style

## Continuous Integration

Scripts that are triggered when `push`ing code.

Assures quality:

-   Code has consistent style
-   Links are valid (i.e. not broken)
-   Spelling is correct
-   Tests pass
-   \[your check here\]

## Test coding style

Linter: program that tests code for style.

In Python: `ruff`, Sonar, `pytype`, Black, Codacy, Pylint, Flake8, `autopep8`, Pychecker, Pylama

## Break {#break-1}

[Break](#break-1)

## Recap

## End

## Extra

### Static type-checking with mypy

Python is an interpreted language, however, as of PEP 484 it supports Type Hints. Some very popular packages like pydantic even use type hints to evaluate input at runtime.

```         
type_checking.py

def reverse_string(s: str) -\> str: return s.reverse()
```

We can now evaluate if there are any type errors using mypy.

```         
mypy type_checking.py
```

Benefits of Type Hints

-   Improves readability (I think)
-   Easier to spot bugs and maintain project
-   Forces you to think
-   Better autocomplete if using language server

### Where to go from here

If you are interested in learning more tools and ways to improve the quality of your project, a really good place to start is looking at cookie cutter templates. Two great ones for Python are:

```         
https://cookiecutter-hypermodern-python.readthedocs.io/en/2022.6.3.post1/
https://scikit-hep.org/developer
```

## Links

-   [Former lecture on testing](https://uppmax.github.io/programming_formalism-automated_testing/)
