---
title: "Struct design"
author: "Rich√®l Bilderbeek"
format: revealjs
editor: visual
from: markdown+emoji
bibliography: struct_design_lecture.bib
csl: vancouver.csl
css: styles.css
slide-number: true
number-sections: true
---

# The Big Picture ![](CC-BY-NC-SA.png)

<https://github.com/UPPMAX/programming_formalisms/blob/main/tdd/tdd_lecture/tdd_lecture.qmd>

![](programming_formalism_logo_25_cropped.png)

## Breaks

Please take breaks: these are important for learning. Ideally, do something boring @newport2016deep!

## Schedule

| Day | From  | To    | What                                       |
|-----|-------|-------|--------------------------------------------|
| Thu | 9:00  | 10:00 | Class diagram for project                  |
| Thu | 10:00 | 10:15 | Break                                      |
| Thu | 10:15 | 11:00 | Creating files and first tests for project |
| Thu | 11:00 | 11:15 | Break                                      |
| Thu | 11:15 | 12:00 | Lecture: Class design                      |
| Thu | 12:00 | 13:00 | Lunch                                      |

# Data structures

```{python}
#| echo: false
#| eval: false
import this
```

> The Zen of Python, by Tim Peters
>
> \[...\] Readability counts. \[...\] If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. \[...\]

# Why data structures?

-   Increase expressiveness
-   To bundle data that belongs together

## Increase expressiveness, in design

"A two-dimensional coordinate **has a** x and a y component"

![](struct_coordinat.png)

> Class diagram of a two-dimensional coordinate

## Increase expressiveness, in code

```{python}
#| echo: false
#| eval: true
def get_a():
    return [3.14, 2.72]
```

```{python}
#| echo: true
#| eval: true
a = get_a()
print(type(a))
```

What is `a`?

## Increase expressiveness, in code

```{python}
#| echo: false
#| eval: true
class Coordinat:
    def __init__(self, any_x, any_y):
      x = any_x
      y = any_y

def get_b():
    return Coordinat(3.14, 2.72)
```

```{python}
#| echo: true
#| eval: true
b = get_b()
print(type(b))
```

Ah, it is a **coordinat**!

-   [P.1. Express ideas directly in code](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rp-direct)
-   [PEP 20: 'Explicit is better than implicit'](https://peps.python.org/pep-0020/#the-zen-of-python)

## Bundle data

```{python}
#| echo: false
#| eval: false
# The PlantUML does not render, even not after
# quarto add pandoc-ext/diagram
# See https://github.com/pandoc-ext/diagram/issues/6
```

```{python}
#| echo: false
#| eval: false
@startuml
struct Particle
struct Speed
struct Position

Particle --* Speed
Particle --* Position

struct Particle {
  + position
  + speed
}

struct Speed {
  + delta_x
  + delta_y
}

struct Position {
  + x
  + y
}
@enduml
```

![](struct_particle_speed_position.png)

-   [C.1. Organize related data into structures (structs or classes)](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-org)
-   [C.2: (...) Use struct if the data members can vary independently](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-struct)

## structure versus class

| Parameter               | structure                    | class                       |
|----------------------------------|----------------------|----------------|
| Python keyword          | `class`                      | `class`                     |
| All states are valid    | Yes                          | No                          |
| Maintains a valid state | No                           | Yes                         |
| Example                 | A number for an x coordinate | A string for a DNA sequence |

-   A structure is also called a `struct` or 'Plain Old Datatype' (POD)
-   Class design in later session :-)

## Exercise (10 mins)

-   Which structures does the project need?
-   Together: make an alphabetic list of structures in the shared document

## References
