---
title: "Data structures"
author: "Rich√®l Bilderbeek"
format: revealjs
editor: visual
from: markdown+emoji
bibliography: data_structures_lecture.bib
csl: vancouver.csl
css: styles.css
slide-number: true
number-sections: true
---

# The Big Picture ![](CC-BY-NC-SA.png)

<https://github.com/UPPMAX/programming_formalisms/blob/main/data_structures/data_structures_lecture/data_structures_lecture.qmd>

![](programming_formalism_logo_25_cropped.png)

## Breaks

Please take breaks: these are important for learning. Ideally, do something boring @newport2016deep!

## Schedule

| Day | From  | To    | What                                       |
|-----|-------|-------|--------------------------------------------|
| Thu | 9:00  | 10:00 | `struct` diagram for project               |
| Thu | 10:00 | 10:15 | Break                                      |
| Thu | 10:15 | 11:00 | `struct` relations                         |
| Thu | 11:00 | 11:15 | Break                                      |
| Thu | 11:15 | 12:00 | Class design                               |
| Thu | 12:00 | 13:00 | Lunch                                      |

# Data structures

```{python}
#| echo: false
#| eval: false
import this
```

> The Zen of Python, by Tim Peters
>
> \[...\] Readability counts. \[...\] If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. \[...\]

## What and why?

Data structure are 'ways to organize your data'.
-   Bad way: put all in one `list`

Good (:innocent:) data structures:

-   Increase expressiveness
-   Bundles data that belongs together
-   Ensures correct state of the program

# `struct` design

Good (:innocent:) data structures:

-   **Increase expressiveness**
-   Bundles data that belongs together
-   Ensures correct state of the program

## Increase expressiveness, in design

"A two-dimensional coordinate **has a** x and a y component"

![](struct_coordinat.png)

> Class diagram of a two-dimensional coordinate

## Increase expressiveness, in code

```{python}
#| echo: false
#| eval: true
def get_a():
    return [3.14, 2.72]
```

```{python}
#| echo: true
#| eval: true
a = get_a()
print(type(a))
```

What is `a`?

## Increase expressiveness, in code

```{python}
#| echo: false
#| eval: true
class Coordinat:
    def __init__(self, any_x, any_y):
      x = any_x
      y = any_y

def get_b():
    return Coordinat(3.14, 2.72)
```

```{python}
#| echo: true
#| eval: true
b = get_b()
print(type(b))
```

Ah, it is a **coordinat**!

-   [P.1. Express ideas directly in code](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rp-direct)
-   [PEP 20: 'Explicit is better than implicit'](https://peps.python.org/pep-0020/#the-zen-of-python)

## structure versus class

| Parameter               | structure                    | class                       |
|--------------------------------|----------------------|------------------|
| Python keyword          | `class`                      | `class`                     |
| All states are valid    | Yes                          | No                          |
| Maintains a valid state | No                           | Yes                         |
| Example                 | A number for an x coordinate | A string for a DNA sequence |

-   A structure is also called a `struct` or 'Plain Old Datatype' (POD)
-   Class design in later session :-)

## Optional exercise 1: design a struct (15 mins)

Design the structs to contain:

-   A square
-   A rectangle
-   A circle

## Exercise 2: overview of struct (15 mins)

-   Which structures does the project need?
-   Together:
    -   make an alphabetic list of structures in the shared document
    -   add exactly 1 maintainer to each struct
-   Put the list on the GitHub project repository

## Exercise 3: create structs (30 mins)

-   Per struct maintainer, create one group
-   Add the struct to the GitHub project repository

# `struct` relations

Good (:innocent:) data structures:

-   Increase expressiveness
-   **Bundles data that belongs together**
-   Ensures correct state of the program

## A has-a relationship

When one data type has a 'has-a' relationship with another, 
this is called *composition*.

![](struct_coordinat.png)

A `Coordinat` has an `x` and `y`

## Composition of structs

![](struct_particle_speed_position.png)

-   [C.1. Organize related data into structures (structs or classes)](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-org)

# `class design

## An invariant

```{python}
#| echo: false
#| eval: false
# The PlantUML does not render, even not after
# quarto add pandoc-ext/diagram
# See https://github.com/pandoc-ext/diagram/issues/6
```

```{python}
#| echo: false
#| eval: false
@startuml

class Range {
  + _lowest
  + _highest
}

@enduml
```

-   [C.2: Use class if the class has an invariant; use struct if the data members can vary independently](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-struct)
-   [C.8: Use class rather than struct if any member is non-public](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-class)


# Built-in data structures

## Problem

Are there classes that can help me solve problems more elegantly?

## Python classes

-   `list`: heterogeneous container
-   `tuple`: immutable `list`
-   `set`: sets
-   `dict`: dictionary
-   Regular expressions: text patterns

From [Python 'Data Structures' documentation](https://docs.python.org/3/tutorial/datastructures.html)

## `set`

Sorted collection of unique elements.

```{python}
#| echo: true
#| eval: true
data = [3, 1, 4, 1, 5]
s = set(data)
assert 3 in s
assert list(s) == [1, 3, 4, 5]
```

-   No need to check for elements existing twice

## `dict`

A dictionary:

```{python}
#| echo: true
#| eval: true
periodic_table = dict({1: "Hydrogen", 2: "Helium", 3: "Lithium"})
periodic_table[2] = "helium"
assert periodic_table[2] == "helium"
```

-   Commonly uses as a look-up table
-   A look-up table can store the results of earlier calculations

## Regular expressions

A state-machine for a pattern in text

```{python}
#| echo: true
#| eval: true
import re
dna_regex = re.compile("^[ACGT]*$")
assert dna_regex.match("")
assert dna_regex.match("A")
assert dna_regex.match("CA")
assert dna_regex.match("GCA")
assert dna_regex.match("TGCA")
assert dna_regex.match("TGCAAAAAA")
assert not dna_regex.match("nonsense")
```

-   <https://docs.python.org/3/library/re.html>

# Writing a good class

Q: What is a good class?

. . .

A:

-   guarantees its stored data is valid, e.g the class `DnaSequence` is probably a string of one or more A, C, G and T
-   the quality requirements for a function, among others a good interface
-   writing a design, documentation and tests all help

## Class anatomy

-   `__init__`: instantiation operation (a.k.a. 'constructor')
-   Private variables: what it secretly is
-   Methods: how to work on it

```{python}
#| echo: false
#| eval: true
def is_dna_string(s): return True
```

```{python}
#| echo: true
#| eval: true
class DnaSequence:
    def __init__(self, sequence):
        assert is_dna_string(sequence)
        self._sequence = sequence # convention
    
    def get_str(self):
        return self._sequence

a = DnaSequence("ACGT")
assert a.get_str() == "ACGT"
```

## Private variables are a social convention

Use of `_` before the name of a private variable is a social convention!

```         
self._sequence = sequence # convention
```

Nothing stops you from:

```{python}
#| echo: true
#| eval: true
a._sequence = "XXX"
assert a.get_str() == "XXX"
```

Some other programming languages offer stronger guarantees.

## Inheritance and polymorphism

> C++ is a horrible language. It's made more horrible by the fact that a lot of substandard programmers use it, to the point where it's much much easier to generate total and utter crap with it.
>
> Linus Torvalds, 2007-09-06

## Inheritance and polymorphism

-   Can create class hierarchies
    -   'All Animal objects can make a sounds'
-   Easy to abuse, hard to use correctly
-   Design Patterns are known to work well

![@gamma1995elements](design_patterns_book.jpg)

## Class design

-   [Python classes](https://docs.python.org/3/tutorial/classes.html)
-   [C++ Core Guidelines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-class)

## Recap

## References
