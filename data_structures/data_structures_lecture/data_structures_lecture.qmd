---
title: "Data structures"
author: "Rich√®l Bilderbeek"
format: revealjs
editor: visual
from: markdown+emoji
bibliography: data_structures_lecture.bib
csl: vancouver.csl
css: styles.css
slide-number: true
number-sections: true
---

# The Big Picture ![](CC-BY-NC-SA.png)

<https://github.com/UPPMAX/programming_formalisms/blob/main/tdd/tdd_lecture/tdd_lecture.qmd>

![](programming_formalism_logo_25_cropped.png)

## Breaks

Please take breaks: these are important for learning. 
Ideally, do something boring @newport2016deep!

## Schedule

Day|From |To   |What
---|-----|-----|------------------------------------------
Thu|9:00 |10:00|Class diagram for project
Thu|10:00|10:15|Break
Thu|10:15|11:00|Creating files and first tests for project
Thu|11:00|11:15|Break
Thu|11:15|12:00|Lecture: Class design
Thu|12:00|13:00|Lunch

# Data structures

```{python}
#| echo: true
#| eval: true
import this
```

# Why data structures?

 * Increase expressiveness
 * To bundle data that belongs together

## Increase expressiveness

```{python}
#| echo: true
#| eval: true
a = [3.14, 2.72]
print(type(a))
```

A list is created ...?

. . .

```{python}
#| echo: false
#| eval: true
class Coordinat:
    def __init__(self, any_x, any_y):
      x = any_x
      y = any_y
```

```{python}
#| echo: true
#| eval: true
b = Coordinat(3.14, 2.72)
print(type(b))
```

Ah, it is a **coordinat**!

 * [P.1. Express ideas directly in code](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rp-direct)
 * [PEP 20: 'Explicit is better than implicit'](https://peps.python.org/pep-0020/#the-zen-of-python)

## Bundle data

```{python}
#| echo: false
#| eval: false
# The PlantUML does not render, even not after
# quarto add pandoc-ext/diagram
# See https://github.com/pandoc-ext/diagram/issues/6
```

```{python}
#| echo: false
#| eval: false
@startuml

class Particle
struct Speed
struct Position

Particle --* Speed
Particle --* Position

class Particle {
  - _position
  - _speed
  - _max_speed
}

struct Speed {
  + delta_x
  + delta_y
}

struct Position {
  + x
  + y
}

@enduml
```

![](class_particle.png)

 * [C.1. Organize related data into structures (structs or classes)](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-org)

## Bundle data

```{python}
#| echo: false
#| eval: false
# The PlantUML does not render, even not after
# quarto add pandoc-ext/diagram
# See https://github.com/pandoc-ext/diagram/issues/6
```

```{python}
#| echo: false
#| eval: false
@startuml

struct Position
class Range

struct Position {
  + x
  + y
}

class Range {
  + _lowest
  + _highest
}

@enduml
```

 * [C.2: Use class if the class has an invariant; use struct if the data members can vary independently](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-struct)
 * [C.8: Use class rather than struct if any member is non-public](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-class)

# Built-in data structures

## Problem

Are there classes that can help me solve problems more elegantly?

## Python classes

-   `list`: heterogeneous container
-   `tuple`: immutable `list`
-   `set`: sets
-   `dict`: dictionary
-   Regular expressions: text patterns

From [Python 'Data Structures' documentation](https://docs.python.org/3/tutorial/datastructures.html)

## `set`

Sorted collection of unique elements.

```{python}
#| echo: true
#| eval: true
data = [3, 1, 4, 1, 5]
s = set(data)
assert 3 in s
assert list(s) == [1, 3, 4, 5]
```

-   No need to check for elements existing twice

## `dict`

A dictionary:

```{python}
#| echo: true
#| eval: true
periodic_table = dict({1: "Hydrogen", 2: "Helium", 3: "Lithium"})
periodic_table[2] = "helium"
assert periodic_table[2] == "helium"
```

-   Commonly uses as a look-up table
-   A look-up table can store the results of earlier calculations

## Regular expressions

A state-machine for a pattern in text

```{python}
#| echo: true
#| eval: true
import re
dna_regex = re.compile("^[ACGT]*$")
assert dna_regex.match("")
assert dna_regex.match("A")
assert dna_regex.match("CA")
assert dna_regex.match("GCA")
assert dna_regex.match("TGCA")
assert dna_regex.match("TGCAAAAAA")
assert not dna_regex.match("nonsense")
```

-   <https://docs.python.org/3/library/re.html>

# Writing a good class

Q: What is a good class?

. . .

A:

-   guarantees its stored data is valid, e.g the class `DnaSequence` is probably a string of one or more A, C, G and T
-   the quality requirements for a function, among others a good interface
-   writing a design, documentation and tests all help

## Class anatomy

-   `__init__`: instantiation operation (a.k.a. 'constructor')
-   Private variables: what it secretly is
-   Methods: how to work on it

```{python}
#| echo: false
#| eval: true
def is_dna_string(s): return True
```

```{python}
#| echo: true
#| eval: true
class DnaSequence:
    def __init__(self, sequence):
        assert is_dna_string(sequence)
        self._sequence = sequence # convention
    
    def get_str(self):
        return self._sequence

a = DnaSequence("ACGT")
assert a.get_str() == "ACGT"
```

## Private variables are a social convention

Use of `_` before the name of a private variable is a social convention!

```         
self._sequence = sequence # convention
```

Nothing stops you from:

```{python}
#| echo: true
#| eval: true
a._sequence = "XXX"
assert a.get_str() == "XXX"
```

Some other programming languages offer stronger guarantees.

## Inheritance and polymorphism

> C++ is a horrible language. It's made more horrible by the fact that a lot of substandard programmers use it, to the point where it's much much easier to generate total and utter crap with it.
>
> Linus Torvalds, 2007-09-06

## Inheritance and polymorphism

-   Can create class hierarchies
    -   'All Animal objects can make a sounds'
-   Easy to abuse, hard to use correctly
-   Design Patterns are known to work well

![@gamma1995elements](design_patterns_book.jpg)

## Class design

-   [Python classes](https://docs.python.org/3/tutorial/classes.html)
-   [C++ Core Guidelines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-class)

## Recap

## References
